js:
// Map frequencies based on the provided values 
const mapFrequencies = {
    'Flakturm-Medium': 6,
    'Yards-Medium': 20,
    'Yards-Hard': 7,
    'Nezhit-Easy': 9,
    'Hangar-Medium': 11,
    'Meadows-Medium': 6,
    'Cliffside-Medium': 9,
    'Nuketown-Hard': 2,
    'Donner-Hard': 15,
    'Gdansk-Hard': 7,
    'Hangar-Easy': 12,
    'Station-Easy': 24,
    'Cliffside-Hard': 7,
    'Inferno-Hard': 12,
    'Shimajiri-Easy': 8,
    'Bootcamp-Easy': 8,
    'Shimajiri-Medium': 6,
    'Inferno-Medium': 28,
    'Nuketown-Medium': 9,
    'Storm-Medium': 14,
    'Brittany-Hard': 9,
    'Station-Medium': 12,
    'Brittany-Easy': 22,
    'Shimajiri-Hard': 1,
    'Storm-Hard': 5,
    'Asylum-Medium': 5,
    'Anzio-Easy': 19,
    'Ursprung-Medium': 8,
    'Brittany-Medium': 21,
    'Nezhit-Medium': 7,
    'Station-Hard': 1,
    'Nuketown-Easy': 12,
    // Add the remaining entries...
};

let currentMap = '';
let currentCategory = '';
let attempts = 0;
let maxAttempts = 4;
let score = 0;
let usedImages = [];
let devtoolsOpened = false;

const checkDevTools = () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    
    if (width <= 100 || height <= 100) {  // Developer tools open usually changes the window dimensions
        devtoolsOpened = true;
        alert("Developer tools detected! Cheating is not allowed.");
        // Optional: Disable game or reset score, etc.
    }
};

setInterval(checkDevTools, 1000);


const mapNames = [
    'Flakturm', 'Yards', 'Nezhit', 'Hangar', 'Meadows', 'Cliffside', 'Nuketown', 'Donner',
    'Gdansk', 'Station', 'Cliffside', 'Inferno', 'Shimajiri', 'Bootcamp', 'Inferno', 'Nuketown',
    'Storm', 'Brittany', 'Shimajiri', 'Asylum', 'Anzio', 'Ursprung', 'Brittany', 'Nezhit'
];

// Start the game
function startGame(category) {
    currentCategory = category;
    document.getElementById('categories').style.display = 'none';
    document.getElementById('game').style.display = 'block';
    nextRound();
}

// Start the next round
function nextRound() {
    if (attempts >= maxAttempts) {
        endGame();
        return;
    }

    // Filter out already used maps to avoid duplicates
    let availableMaps = mapNames.filter(map => !usedImages.includes(map));
    if (availableMaps.length === 0) {
        usedImages = [];
        availableMaps = mapNames;
    }

    // Pick a random map from the available maps
    currentMap = availableMaps[Math.floor(Math.random() * availableMaps.length)];
    usedImages.push(currentMap);

// Determine the category and construct the map identifier
const mapCategory = `${currentMap}-${currentCategory.charAt(0).toUpperCase() + currentCategory.slice(1).toLowerCase()}`;

console.log('Constructed mapCategory:', mapCategory); // Check the final value of mapCategory

// Get the frequency for the current map and category combination
const frequency = mapFrequencies[mapCategory] || 3;  // Default to 3 if no frequency is found
console.log('Frequency used:', frequency);  // Log the frequency being used

    
    const imageNumber = Math.floor(Math.random() * frequency) + 1; // Random number based on frequency


    // Construct the image path based on the selected map and category
    const imagePath = `Maps/${currentMap}/${currentCategory}/${currentMap.toLowerCase()}_${currentCategory.toLowerCase()}-${imageNumber}.png`;

    const nextImage = new Image();
    nextImage.src = imagePath;
    nextImage.onload = () => {
        currentImage = imagePath;
        document.getElementById('mapImage').src = currentImage;
        document.getElementById('mapImage').style.opacity = 1;
        document.getElementById('guess').value = '';
    };
    nextImage.onerror = () => alert('Failed to load image!');
}

// Submit guess
function submitGuess() {
    const userGuess = document.getElementById('guess').value.trim().toLowerCase();
    const correctAnswer = currentMap.toLowerCase();

    if (userGuess === correctAnswer) {
        score++;
        attempts++;
        showPopup('correctPopup');
    } else {
        attempts++;
        document.getElementById('correctAnswer').textContent = currentMap;
        showPopup('incorrectPopup');
    }

    setTimeout(nextRound, 1000);
}

// Show feedback popup
function showPopup(popupId) {
    const popup = document.getElementById(popupId);
    popup.style.display = 'block';
    setTimeout(() => {
        popup.style.display = 'none';
    }, 1000);
}

// End the game
function endGame() {
    document.getElementById('game').style.display = 'none';
    document.getElementById('score').style.display = 'block';
    document.getElementById('finalScore').textContent = score;
    document.getElementById('finalScoreText').textContent = score;
    document.getElementById('maxAttempts').textContent = maxAttempts;
    document.getElementById('endPopup').style.display = 'block';
    document.addEventListener('contextmenu', function(e) {
    e.preventDefault(); // Disable right-click
});

}

// Restart the game
function restartGame() {
    attempts = 0;
    score = 0;
    usedImages = [];
    document.getElementById('endPopup').style.display = 'none';
    document.getElementById('score').style.display = 'none';
    document.getElementById('categories').style.display = 'block';
}

    // Prevent right-click on the image
    document.addEventListener('DOMContentLoaded', function() {
        const mapImage = document.getElementById('mapImage');
        mapImage.addEventListener('contextmenu', (event) => {
            event.preventDefault();  // Disable right-click on the image
            
        });
    });

var _z = console;
Object.defineProperty( window, "console", {
    get : function(){if( _z._commandLineAPI ){ throw "Script execution not permitted" } return _z; },
    set : function(val){ _z = val }
});